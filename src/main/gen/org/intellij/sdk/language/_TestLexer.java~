/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package org.intellij.sdk.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static org.intellij.sdk.language.psi.TestTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_TestLexer.flex</tt>
 */
public class _TestLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 14208 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\2\11\1\14\1\36\3\11\1\37\10\11\1\40\1\41\5\14\1\42\1\43"+
    "\11\11\1\44\2\11\1\45\5\11\1\46\4\11\1\47\1\50\4\11\51\14\1\51\3\14\1\52\1"+
    "\53\4\14\1\54\12\11\1\55\u0381\11");

  /* The ZZ_CMAP_Y table has 2944 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\10\1\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\24\12\13\1\25"+
    "\1\13\1\26\1\25\1\13\1\27\4\1\1\13\1\30\1\31\2\1\2\13\1\30\1\1\1\32\1\25\5"+
    "\13\1\33\1\34\1\35\1\1\1\36\1\13\1\1\1\37\5\13\1\40\1\41\1\42\1\13\1\30\1"+
    "\43\1\13\1\44\1\45\1\1\1\13\1\46\4\1\1\13\1\47\4\1\1\50\2\13\1\51\1\1\1\52"+
    "\1\16\1\25\1\53\1\54\1\55\1\56\1\57\1\60\2\16\1\61\1\54\1\55\1\62\1\1\1\63"+
    "\1\1\1\64\1\65\1\22\1\55\1\66\1\1\1\67\1\16\1\70\1\71\1\54\1\55\1\66\1\1\1"+
    "\60\1\16\1\41\1\72\1\73\1\74\1\75\1\1\1\67\2\1\1\76\1\36\1\55\1\51\1\1\1\77"+
    "\1\16\1\1\1\100\1\36\1\55\1\101\1\1\1\57\1\16\1\102\1\76\1\36\1\13\1\103\1"+
    "\57\1\104\1\16\1\42\1\105\1\106\1\13\1\107\1\110\3\1\1\25\2\13\1\111\1\110"+
    "\3\1\1\112\1\113\1\114\1\115\1\116\1\117\2\1\1\67\3\1\1\120\1\13\1\121\1\1"+
    "\1\122\7\1\2\13\1\30\1\123\1\1\1\124\1\125\1\126\1\127\1\1\2\13\1\130\2\13"+
    "\1\131\24\13\1\132\1\133\2\13\1\132\2\13\1\134\1\135\1\14\3\13\1\135\3\13"+
    "\1\30\2\1\1\13\1\1\5\13\1\136\1\25\45\13\1\137\1\13\1\140\1\30\4\13\1\30\1"+
    "\141\1\142\1\16\1\13\1\16\1\13\1\16\1\142\1\67\3\13\1\143\1\1\1\144\4\1\5"+
    "\13\1\27\1\145\1\13\1\146\4\13\1\40\1\13\1\147\3\1\1\13\1\150\1\151\2\13\1"+
    "\152\1\13\1\75\3\1\1\13\1\110\3\13\1\151\4\1\1\153\5\1\1\105\2\13\1\143\1"+
    "\154\3\1\1\155\1\13\1\156\1\42\2\13\1\40\1\1\2\13\1\143\1\1\1\37\1\42\1\13"+
    "\1\150\1\46\5\1\1\157\1\160\14\13\4\1\21\13\1\136\2\13\1\136\1\161\1\13\1"+
    "\150\3\13\1\162\1\163\1\164\1\121\1\163\1\165\1\1\1\166\2\1\1\167\1\1\1\170"+
    "\1\1\1\121\6\1\1\171\1\172\1\173\1\174\1\175\3\1\1\176\147\1\2\13\1\147\2"+
    "\13\1\147\10\13\1\177\1\200\2\13\1\130\3\13\1\201\1\1\1\13\1\110\4\202\4\1"+
    "\1\123\35\1\1\203\2\1\1\204\1\25\4\13\1\205\1\25\4\13\1\131\1\105\1\13\1\150"+
    "\1\25\4\13\1\147\1\1\1\13\1\30\3\1\1\13\40\1\133\13\1\40\4\1\135\13\1\40\2"+
    "\1\10\13\1\121\4\1\2\13\1\150\20\13\1\121\1\13\1\206\1\1\2\13\1\147\1\123"+
    "\1\13\1\150\4\13\1\40\2\1\1\207\1\210\5\13\1\211\1\13\1\147\1\27\3\1\1\207"+
    "\1\212\1\13\1\31\1\1\3\13\1\143\1\210\2\13\1\143\3\1\1\213\1\42\1\13\1\40"+
    "\1\13\1\110\1\1\1\13\1\121\1\50\2\13\1\31\1\123\1\1\1\214\1\215\2\13\1\46"+
    "\1\1\1\216\1\1\1\13\1\217\3\13\1\220\1\221\1\222\1\30\1\64\1\223\1\224\1\202"+
    "\2\13\1\131\1\40\7\13\1\31\1\1\72\13\1\143\1\13\1\225\2\13\1\152\20\1\26\13"+
    "\1\150\6\13\1\75\2\1\1\110\1\226\1\55\1\227\1\230\6\13\1\16\1\1\1\155\25\13"+
    "\1\150\1\1\4\13\1\210\2\13\1\27\2\1\1\152\7\1\1\214\7\13\1\121\2\1\1\25\1"+
    "\30\1\25\1\30\1\231\4\13\1\147\1\232\1\233\2\1\1\234\1\13\1\14\1\235\2\150"+
    "\2\1\7\13\1\30\30\1\1\13\1\121\3\13\1\67\2\1\2\13\1\1\1\13\1\236\2\13\1\40"+
    "\1\13\1\150\2\13\1\237\3\1\11\13\1\150\1\1\2\13\1\237\1\13\1\152\2\13\1\27"+
    "\3\13\1\143\11\1\23\13\1\110\1\13\1\40\1\27\11\1\1\240\2\13\1\241\1\13\1\40"+
    "\1\13\1\110\1\13\1\147\4\1\1\13\1\242\1\13\1\40\1\13\1\75\4\1\3\13\1\243\4"+
    "\1\1\67\1\244\1\13\1\143\2\1\1\13\1\121\1\13\1\121\2\1\1\120\1\13\1\151\1"+
    "\1\3\13\1\40\1\13\1\40\1\13\1\31\1\13\1\16\6\1\4\13\1\46\3\1\3\13\1\31\3\13"+
    "\1\31\60\1\1\155\2\13\1\27\4\1\1\155\2\13\2\1\1\13\1\46\1\1\1\155\1\13\1\110"+
    "\2\1\2\13\1\245\1\155\2\13\1\31\1\246\1\247\2\1\1\13\1\22\1\152\5\1\1\250"+
    "\1\251\1\46\2\13\1\147\2\1\1\71\1\54\1\55\1\66\1\1\1\252\1\16\11\1\3\13\1"+
    "\151\1\253\3\1\3\13\1\1\1\254\13\1\2\13\1\147\2\1\1\255\2\1\3\13\1\1\1\256"+
    "\3\1\2\13\1\30\5\1\1\13\1\75\30\1\4\13\1\1\1\123\34\1\3\13\1\46\20\1\1\55"+
    "\1\13\1\147\1\1\1\67\2\1\1\210\1\13\67\1\71\13\1\75\16\1\14\13\1\143\53\1"+
    "\2\13\1\147\75\1\44\13\1\110\33\1\43\13\1\46\1\13\1\147\7\1\1\13\1\150\1\1"+
    "\3\13\1\1\1\143\1\1\1\155\1\257\1\13\67\1\4\13\1\151\1\67\3\1\1\155\4\1\1"+
    "\67\1\1\76\13\1\121\1\1\57\13\1\31\20\1\1\16\77\1\6\13\1\30\1\121\1\46\1\75"+
    "\66\1\5\13\1\214\3\13\1\142\1\260\1\261\1\262\3\13\1\263\1\264\1\13\1\265"+
    "\1\266\1\36\24\13\1\267\1\13\1\36\1\131\1\13\1\131\1\13\1\214\1\13\1\214\1"+
    "\147\1\13\1\147\1\13\1\55\1\13\1\55\1\13\1\216\3\1\14\13\1\151\3\1\4\13\1"+
    "\143\113\1\1\262\1\13\1\270\1\271\1\272\1\273\1\274\1\275\1\276\1\152\1\277"+
    "\1\152\24\1\55\13\1\110\2\1\103\13\1\151\15\13\1\150\150\13\1\16\25\1\41\13"+
    "\1\150\36\1");

  /* The ZZ_CMAP_A table has 3072 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\17\4\2\22\0\1\17\1\0\1\15\1\4\3\0\1\13\1\56\1\57\1\63\1\61\1\62\1"+
    "\60\1\6\1\0\12\5\1\7\1\54\1\64\1\55\1\65\2\0\1\24\1\36\1\35\1\25\1\30\1\46"+
    "\1\50\1\43\1\16\1\52\1\37\1\26\1\45\1\32\1\44\1\41\1\53\1\31\1\34\1\27\1\40"+
    "\1\51\1\42\1\47\1\33\1\12\1\0\1\14\2\0\1\11\1\0\1\21\1\22\1\103\1\71\1\23"+
    "\1\12\1\101\1\105\1\102\1\12\1\104\1\20\1\74\1\70\1\66\1\67\1\75\1\77\1\72"+
    "\1\73\1\76\3\12\1\100\1\12\12\0\1\1\12\0\1\3\11\0\1\10\12\0\1\10\4\0\1\10"+
    "\5\0\27\10\1\0\12\10\4\0\14\10\16\0\5\10\7\0\1\10\1\0\1\10\1\0\5\10\1\0\2"+
    "\10\2\0\4\10\1\0\1\10\6\0\1\10\1\0\3\10\1\0\1\10\1\0\4\10\1\0\23\10\1\0\13"+
    "\10\10\0\6\10\1\0\26\10\2\0\1\10\6\0\10\10\10\0\13\10\5\0\3\10\33\0\6\10\1"+
    "\0\1\10\17\0\2\10\7\0\2\10\12\0\3\10\2\0\2\10\1\0\16\10\15\0\11\10\13\0\1"+
    "\10\30\0\6\10\4\0\2\10\4\0\1\10\5\0\6\10\4\0\1\10\11\0\1\10\3\0\1\10\7\0\11"+
    "\10\7\0\5\10\1\0\10\10\6\0\26\10\3\0\1\10\2\0\1\10\7\0\11\10\4\0\10\10\2\0"+
    "\2\10\2\0\26\10\1\0\7\10\1\0\1\10\3\0\4\10\3\0\1\10\20\0\1\10\15\0\2\10\1"+
    "\0\1\10\5\0\6\10\4\0\2\10\1\0\2\10\1\0\2\10\1\0\2\10\17\0\4\10\1\0\1\10\3"+
    "\0\3\10\20\0\11\10\1\0\2\10\1\0\2\10\1\0\5\10\3\0\1\10\2\0\1\10\30\0\1\10"+
    "\13\0\10\10\2\0\1\10\3\0\1\10\1\0\6\10\3\0\3\10\1\0\4\10\3\0\2\10\1\0\1\10"+
    "\1\0\2\10\3\0\2\10\3\0\3\10\3\0\14\10\13\0\10\10\1\0\2\10\10\0\3\10\5\0\1"+
    "\10\4\0\10\10\1\0\6\10\1\0\5\10\3\0\1\10\3\0\2\10\15\0\13\10\2\0\1\10\6\0"+
    "\3\10\10\0\1\10\5\0\22\10\3\0\10\10\1\0\11\10\1\0\1\10\2\0\7\10\11\0\1\10"+
    "\1\0\2\10\15\0\2\10\1\0\1\10\2\0\2\10\1\0\1\10\2\0\1\10\6\0\4\10\1\0\7\10"+
    "\1\0\3\10\1\0\1\10\1\0\1\10\2\0\2\10\1\0\4\10\1\0\2\10\11\0\1\10\2\0\5\10"+
    "\1\0\1\10\25\0\14\10\1\0\24\10\13\0\5\10\22\0\7\10\4\0\4\10\3\0\1\10\3\0\2"+
    "\10\7\0\3\10\4\0\15\10\14\0\1\10\1\0\6\10\1\0\1\10\5\0\1\10\2\0\13\10\1\0"+
    "\15\10\1\0\4\10\2\0\7\10\1\0\1\10\1\0\4\10\2\0\1\10\1\0\4\10\2\0\7\10\1\0"+
    "\1\10\1\0\4\10\2\0\16\10\2\0\6\10\2\0\15\10\2\0\1\10\1\3\17\10\1\0\10\10\7"+
    "\0\15\10\1\0\6\10\23\0\1\10\4\0\1\10\3\0\5\10\2\0\22\10\1\0\1\10\5\0\17\10"+
    "\1\0\16\10\2\0\5\10\13\0\14\10\13\0\1\10\15\0\7\10\7\0\16\10\15\0\2\10\11"+
    "\0\4\10\1\0\4\10\3\0\2\10\11\0\10\10\1\0\1\10\1\0\1\10\1\0\1\10\1\0\6\10\1"+
    "\0\7\10\1\0\1\10\3\0\3\10\1\0\7\10\3\0\4\10\2\0\6\10\4\0\13\3\15\0\2\1\5\0"+
    "\1\3\17\0\1\3\1\0\1\10\15\0\1\10\2\0\1\10\4\0\1\10\2\0\12\10\1\0\1\10\3\0"+
    "\5\10\6\0\1\10\1\0\1\10\1\0\1\10\1\0\4\10\1\0\13\10\2\0\4\10\5\0\5\10\4\0"+
    "\1\10\4\0\2\10\13\0\5\10\6\0\4\10\3\0\2\10\14\0\10\10\7\0\10\10\1\0\7\10\1"+
    "\0\1\3\4\0\2\10\12\0\5\10\5\0\2\10\3\0\7\10\6\0\3\10\12\0\2\10\13\0\11\10"+
    "\2\0\27\10\2\0\7\10\1\0\3\10\1\0\4\10\1\0\4\10\2\0\6\10\3\0\1\10\1\0\1\10"+
    "\2\0\5\10\1\0\12\10\12\0\5\10\1\0\3\10\1\0\10\10\4\0\7\10\3\0\1\10\3\0\2\10"+
    "\1\0\1\10\3\0\2\10\2\0\5\10\2\0\1\10\1\0\1\10\30\0\3\10\3\0\6\10\2\0\6\10"+
    "\2\0\6\10\11\0\7\10\4\0\5\10\3\0\5\10\5\0\1\10\1\0\10\10\1\0\5\10\1\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\12\10\6\0\12\10\2\0\6\10\2\0\6\10\2\0\6\10\2\0\3\10"+
    "\3\0\14\10\1\0\16\10\1\0\2\10\1\0\2\10\1\0\10\10\6\0\4\10\4\0\16\10\2\0\1"+
    "\10\1\0\14\10\1\0\2\10\3\0\1\10\2\0\4\10\1\0\2\10\12\0\10\10\6\0\6\10\1\0"+
    "\3\10\1\0\12\10\3\0\1\10\12\0\4\10\25\0\1\10\1\0\1\10\3\0\7\10\1\0\1\10\1"+
    "\0\4\10\1\0\17\10\1\0\2\10\14\0\3\10\7\0\4\10\11\0\2\10\1\0\1\10\20\0\4\10"+
    "\10\0\1\10\13\0\10\10\5\0\3\10\2\0\1\10\2\0\2\10\2\0\4\10\1\0\14\10\1\0\1"+
    "\10\1\0\7\10\1\0\21\10\1\0\4\10\2\0\10\10\1\0\7\10\1\0\14\10\1\0\4\10\1\0"+
    "\5\10\1\0\1\10\3\0\14\10\2\0\10\10\1\0\2\10\1\0\1\10\2\0\1\10\1\0\12\10\1"+
    "\0\4\10\1\0\1\10\1\0\1\10\6\0\1\10\4\0\1\10\1\0\1\10\1\0\1\10\1\0\3\10\1\0"+
    "\2\10\1\0\1\10\2\0\1\10\1\0\1\10\1\0\1\10\1\0\1\10\1\0\1\10\1\0\2\10\1\0\1"+
    "\10\2\0\4\10\1\0\7\10\1\0\4\10\1\0\4\10\1\0\1\10\1\0\12\10\1\0\5\10\1\0\3"+
    "\10\1\0\5\10\1\0\5\10");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\2\1\30\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\5\7\1\4\1\7\1\0"+
    "\1\22\3\0\1\23\57\7\1\0\6\7\1\24\61\7"+
    "\1\0\16\7\1\25\1\26\33\7\1\27\10\7\1\30"+
    "\22\7\1\31\3\7\1\0\5\7\1\32\10\7\2\33"+
    "\1\34\4\7\1\35\5\7\1\36\1\7\1\37\4\7"+
    "\1\40\1\7\1\41";

  private static int [] zzUnpackAction() {
    int [] result = new int[275];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\u0118\0\106\0\u015e\0\u01a4"+
    "\0\u01ea\0\u0230\0\u0276\0\u02bc\0\u0302\0\u0348\0\u038e\0\u03d4"+
    "\0\u041a\0\u0460\0\u04a6\0\u04ec\0\u0532\0\u0578\0\u05be\0\u0604"+
    "\0\u064a\0\u0690\0\u06d6\0\u071c\0\u0762\0\u07a8\0\u07ee\0\u0834"+
    "\0\u087a\0\u08c0\0\106\0\106\0\106\0\106\0\u0906\0\106"+
    "\0\106\0\106\0\106\0\106\0\u094c\0\u0992\0\u09d8\0\u0a1e"+
    "\0\u0a64\0\u0aaa\0\106\0\u01ea\0\106\0\u0af0\0\u0230\0\u0b36"+
    "\0\106\0\u0b7c\0\u0bc2\0\u0c08\0\u0c4e\0\u0c94\0\u0cda\0\u0d20"+
    "\0\u0d66\0\u0dac\0\u0df2\0\u0e38\0\u0e7e\0\u0ec4\0\u0f0a\0\u0f50"+
    "\0\u0f96\0\u0fdc\0\u1022\0\u1068\0\u10ae\0\u10f4\0\u113a\0\u1180"+
    "\0\u11c6\0\u120c\0\u1252\0\u1298\0\u12de\0\u1324\0\u136a\0\u13b0"+
    "\0\u13f6\0\u143c\0\u1482\0\u14c8\0\u150e\0\u1554\0\u159a\0\u15e0"+
    "\0\u1626\0\u166c\0\u16b2\0\u16f8\0\u173e\0\u1784\0\u17ca\0\u1810"+
    "\0\u1856\0\u189c\0\u18e2\0\u1928\0\u196e\0\u19b4\0\u19fa\0\106"+
    "\0\u1a40\0\u1a86\0\u1acc\0\u1b12\0\u1b58\0\u1b9e\0\u1be4\0\u1c2a"+
    "\0\u1c70\0\u1cb6\0\u1cfc\0\u1d42\0\u1d88\0\u1dce\0\u1e14\0\u1e5a"+
    "\0\u1ea0\0\u1ee6\0\u1f2c\0\u1f72\0\u1fb8\0\u1ffe\0\u2044\0\u208a"+
    "\0\u20d0\0\u2116\0\u215c\0\u21a2\0\u21e8\0\u222e\0\u2274\0\u22ba"+
    "\0\u2300\0\u2346\0\u238c\0\u23d2\0\u2418\0\u245e\0\u24a4\0\u24ea"+
    "\0\u2530\0\u2576\0\u25bc\0\u2602\0\u2648\0\u268e\0\u26d4\0\u271a"+
    "\0\u2760\0\u27a6\0\u27ec\0\u2832\0\u2878\0\u28be\0\u2904\0\u294a"+
    "\0\u2990\0\u29d6\0\u2a1c\0\u2a62\0\u2aa8\0\u2aee\0\u2b34\0\u2b7a"+
    "\0\u01a4\0\u01a4\0\u2bc0\0\u2c06\0\u2c4c\0\u2c92\0\u2cd8\0\u2d1e"+
    "\0\u2d64\0\u2daa\0\u2df0\0\u2e36\0\u2e7c\0\u2ec2\0\u2f08\0\u2f4e"+
    "\0\u2f94\0\u2fda\0\u3020\0\u3066\0\u30ac\0\u30f2\0\u3138\0\u317e"+
    "\0\u31c4\0\u320a\0\u3250\0\u3296\0\u32dc\0\106\0\u3322\0\u3368"+
    "\0\u33ae\0\u33f4\0\u343a\0\u3480\0\u34c6\0\u350c\0\u01a4\0\u3552"+
    "\0\u3598\0\u35de\0\u3624\0\u366a\0\u36b0\0\u36f6\0\u373c\0\u3782"+
    "\0\u37c8\0\u380e\0\u3854\0\u389a\0\u38e0\0\u3926\0\u396c\0\u39b2"+
    "\0\u39f8\0\u01a4\0\u3a3e\0\u3a84\0\u3aca\0\u3b10\0\u3b56\0\u3b10"+
    "\0\u3b9c\0\u3be2\0\u3c28\0\u01a4\0\u3c6e\0\u3cb4\0\u3cfa\0\u3d40"+
    "\0\u3d86\0\u3dcc\0\u3e12\0\u3e58\0\106\0\u3b10\0\u01a4\0\u3e9e"+
    "\0\u3ee4\0\u3f2a\0\u3f70\0\u01a4\0\u3fb6\0\u3ffc\0\u4042\0\u4088"+
    "\0\u40ce\0\u01a4\0\u4114\0\u01a4\0\u415a\0\u41a0\0\u41e6\0\u422c"+
    "\0\u01a4\0\u4272\0\u01a4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[275];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\1\7\1\10\1\2"+
    "\1\10\1\11\1\2\1\12\1\13\1\3\1\14\1\10"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\10\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\10\1\37\1\10\1\40\1\41"+
    "\1\42\1\10\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\10\1\55\2\10\1\56"+
    "\1\57\1\10\1\60\1\10\1\61\6\10\107\0\3\3"+
    "\13\0\1\3\66\0\1\4\2\0\103\4\5\0\1\5"+
    "\1\62\107\0\1\10\1\0\1\10\3\0\1\10\1\0"+
    "\34\10\12\0\20\10\5\0\1\10\1\0\1\63\1\0"+
    "\2\10\3\0\1\10\1\0\34\10\12\0\20\10\13\64"+
    "\1\65\1\66\71\64\14\67\1\70\1\65\70\67\2\0"+
    "\1\71\2\0\1\10\1\0\1\63\1\0\2\10\3\0"+
    "\1\72\1\71\7\10\1\72\1\10\1\72\1\73\1\10"+
    "\1\74\17\10\12\0\20\10\5\0\1\10\1\0\1\63"+
    "\1\0\2\10\3\0\1\10\1\0\1\10\1\75\32\10"+
    "\12\0\1\76\17\10\5\0\1\10\1\0\1\63\1\0"+
    "\2\10\3\0\1\10\1\0\3\10\1\77\30\10\12\0"+
    "\20\10\5\0\1\10\1\0\1\63\1\0\2\10\3\0"+
    "\1\10\1\0\34\10\12\0\2\10\1\100\15\10\5\0"+
    "\1\10\1\0\1\63\1\0\2\10\3\0\1\10\1\0"+
    "\5\10\1\101\1\102\3\10\1\103\1\10\1\104\17\10"+
    "\12\0\20\10\5\0\1\10\1\0\1\63\1\0\2\10"+
    "\3\0\1\105\1\0\4\10\1\106\3\10\1\107\1\110"+
    "\22\10\12\0\20\10\5\0\1\10\1\0\1\63\1\0"+
    "\2\10\3\0\1\111\1\0\10\10\1\112\23\10\12\0"+
    "\20\10\2\0\1\71\2\0\1\10\1\0\1\63\1\0"+
    "\2\10\3\0\1\72\1\71\4\10\1\113\2\10\1\72"+
    "\1\10\1\114\12\10\1\115\7\10\12\0\20\10\5\0"+
    "\1\10\1\0\1\63\1\0\2\10\3\0\1\10\1\0"+
    "\27\10\1\116\4\10\12\0\20\10\2\0\1\71\2\0"+
    "\1\10\1\0\1\63\1\0\2\10\3\0\1\117\1\71"+
    "\7\10\1\72\1\120\1\72\12\10\1\121\7\10\12\0"+
    "\20\10\5\0\1\10\1\0\1\63\1\0\2\10\3\0"+
    "\1\10\1\0\24\10\1\122\7\10\12\0\20\10\5\0"+
    "\1\10\1\0\1\63\1\0\2\10\3\0\1\10\1\0"+
    "\10\10\1\123\23\10\12\0\20\10\5\0\1\10\1\0"+
    "\1\63\1\0\2\10\3\0\1\10\1\0\4\10\1\124"+
    "\4\10\1\125\11\10\1\126\1\127\7\10\12\0\20\10"+
    "\5\0\1\10\1\0\1\63\1\0\2\10\3\0\1\10"+
    "\1\0\4\10\1\130\3\10\1\131\2\10\1\74\20\10"+
    "\12\0\20\10\5\0\1\10\1\0\1\63\1\0\2\10"+
    "\3\0\1\10\1\0\10\10\1\132\23\10\12\0\20\10"+
    "\5\0\1\10\1\0\1\63\1\0\2\10\3\0\1\10"+
    "\1\0\12\10\1\133\6\10\1\134\12\10\12\0\20\10"+
    "\5\0\1\10\1\0\1\63\1\0\2\10\3\0\1\10"+
    "\1\0\11\10\1\135\22\10\12\0\20\10\5\0\1\10"+
    "\1\0\1\63\1\0\2\10\3\0\1\10\1\0\23\10"+
    "\1\136\10\10\12\0\20\10\5\0\1\10\1\0\1\63"+
    "\1\0\2\10\3\0\1\10\1\0\4\10\1\137\27\10"+
    "\12\0\20\10\5\0\1\10\1\0\1\63\1\0\2\10"+
    "\3\0\1\10\1\0\11\10\1\140\6\10\1\141\13\10"+
    "\12\0\20\10\5\0\1\10\1\0\1\63\1\0\2\10"+
    "\3\0\1\10\1\0\11\10\1\142\6\10\1\143\3\10"+
    "\1\144\7\10\12\0\20\10\5\0\1\10\1\0\1\63"+
    "\1\0\2\10\3\0\1\10\1\0\11\10\1\145\22\10"+
    "\12\0\20\10\5\0\1\10\1\0\1\63\1\0\2\10"+
    "\3\0\1\146\1\0\4\10\1\147\27\10\12\0\20\10"+
    "\5\0\1\10\1\0\1\63\1\0\2\10\3\0\1\10"+
    "\1\0\24\10\1\150\7\10\12\0\20\10\60\0\1\151"+
    "\32\0\1\10\1\0\1\63\1\0\2\10\3\0\1\10"+
    "\1\0\34\10\12\0\17\10\1\152\5\0\1\10\1\0"+
    "\1\63\1\0\2\10\3\0\1\10\1\0\34\10\12\0"+
    "\5\10\1\153\12\10\5\0\1\10\1\0\1\63\1\0"+
    "\2\10\3\0\1\10\1\0\34\10\12\0\11\10\1\154"+
    "\6\10\5\0\1\10\1\0\1\63\1\0\2\10\3\0"+
    "\1\10\1\0\34\10\12\0\10\10\1\155\7\10\5\0"+
    "\1\10\1\0\1\63\1\0\2\10\3\0\1\10\1\0"+
    "\3\10\1\156\30\10\12\0\1\157\17\10\5\0\1\62"+
    "\100\0\1\64\2\0\103\64\1\67\2\0\103\67\2\0"+
    "\1\71\2\0\1\10\1\0\1\63\1\0\2\10\3\0"+
    "\1\72\1\71\7\10\1\72\1\10\1\72\22\10\12\0"+
    "\20\10\2\0\1\160\2\0\1\10\1\0\1\63\1\0"+
    "\2\10\3\0\1\161\1\160\4\10\1\17\1\162\1\21"+
    "\1\163\1\23\1\164\1\165\1\10\1\166\1\27\1\30"+
    "\1\31\1\32\1\167\1\34\1\35\1\36\1\10\1\37"+
    "\1\10\1\40\1\41\1\42\1\10\12\0\20\10\2\0"+
    "\1\160\2\0\1\10\1\0\1\63\1\0\2\10\3\0"+
    "\1\161\1\160\4\10\1\17\1\20\1\21\1\170\1\23"+
    "\1\164\1\25\1\10\1\26\1\27\1\30\1\31\1\32"+
    "\1\167\1\34\1\35\1\36\1\10\1\37\1\10\1\40"+
    "\1\41\1\42\1\10\12\0\20\10\5\0\1\10\1\0"+
    "\1\63\1\0\2\10\3\0\1\10\1\0\2\10\1\171"+
    "\31\10\12\0\20\10\5\0\1\10\1\0\1\63\1\0"+
    "\2\10\3\0\1\10\1\0\1\10\1\172\32\10\12\0"+
    "\1\173\17\10\5\0\1\10\1\0\1\63\1\0\2\10"+
    "\3\0\1\10\1\0\34\10\12\0\13\10\1\174\4\10"+
    "\5\0\1\10\1\0\1\63\1\0\2\10\3\0\1\10"+
    "\1\0\34\10\12\0\3\10\1\175\14\10\5\0\1\10"+
    "\1\0\1\63\1\0\2\10\3\0\1\10\1\0\5\10"+
    "\1\74\26\10\12\0\20\10\5\0\1\10\1\0\1\63"+
    "\1\0\2\10\3\0\1\10\1\0\6\10\1\74\1\176"+
    "\24\10\12\0\20\10\5\0\1\10\1\0\1\63\1\0"+
    "\2\10\3\0\1\10\1\0\5\10\1\74\5\10\1\74"+
    "\20\10\12\0\20\10\2\0\1\160\2\0\1\10\1\0"+
    "\1\63\1\0\2\10\3\0\1\161\1\160\4\10\1\17"+
    "\1\20\1\21\1\170\1\23\1\164\1\25\1\10\1\26"+
    "\1\177\1\30\1\31\1\32\1\167\1\34\1\35\1\36"+
    "\1\10\1\37\1\10\1\40\1\41\1\42\1\10\12\0"+
    "\20\10\5\0\1\10\1\0\1\63\1\0\2\10\3\0"+
    "\1\10\1\0\14\10\1\200\17\10\12\0\20\10\5\0"+
    "\1\10\1\0\1\63\1\0\2\10\3\0\1\10\1\0"+
    "\7\10\1\201\24\10\12\0\20\10\5\0\1\10\1\0"+
    "\1\63\1\0\2\10\3\0\1\10\1\0\6\10\1\202"+
    "\5\10\1\203\11\10\1\204\5\10\12\0\20\10\5\0"+
    "\1\10\1\0\1\63\1\0\2\10\3\0\1\10\1\0"+
    "\24\10\1\115\7\10\12\0\20\10\5\0\1\10\1\0"+
    "\1\63\1\0\2\10\3\0\1\10\1\0\17\10\1\205"+
    "\5\10\1\206\6\10\12\0\20\10\5\0\1\10\1\0"+
    "\1\63\1\0\2\10\3\0\1\10\1\0\26\10\1\122"+
    "\5\10\12\0\20\10\5\0\1\10\1\0\1\63\1\0"+
    "\2\10\3\0\1\10\1\0\16\10\1\207\15\10\12\0"+
    "\20\10\2\0\1\71\2\0\1\10\1\0\1\63\1\0"+
    "\2\10\3\0\1\72\1\71\7\10\1\72\1\10\1\72"+
    "\6\10\1\210\13\10\12\0\20\10\5\0\1\10\1\0"+
    "\1\63\1\0\2\10\3\0\1\10\1\0\21\10\1\74"+
    "\12\10\12\0\20\10\5\0\1\10\1\0\1\63\1\0"+
    "\2\10\3\0\1\211\1\0\10\10\1\203\23\10\12\0"+
    "\20\10\2\0\1\71\2\0\1\10\1\0\1\63\1\0"+
    "\2\10\3\0\1\72\1\71\7\10\1\72\1\10\1\72"+
    "\16\10\1\212\3\10\12\0\20\10\5\0\1\10\1\0"+
    "\1\63\1\0\2\10\3\0\1\10\1\0\21\10\1\213"+
    "\12\10\12\0\20\10\5\0\1\10\1\0\1\63\1\0"+
    "\2\10\3\0\1\10\1\0\22\10\1\214\11\10\12\0"+
    "\20\10\5\0\1\10\1\0\1\63\1\0\2\10\3\0"+
    "\1\10\1\0\7\10\1\74\24\10\12\0\20\10\5\0"+
    "\1\10\1\0\1\63\1\0\2\10\3\0\1\10\1\0"+
    "\6\10\1\215\1\74\24\10\12\0\20\10\5\0\1\10"+
    "\1\0\1\63\1\0\2\10\3\0\1\10\1\0\14\10"+
    "\1\205\17\10\12\0\20\10\5\0\1\10\1\0\1\63"+
    "\1\0\2\10\3\0\1\10\1\0\10\10\1\216\23\10"+
    "\12\0\20\10\5\0\1\10\1\0\1\63\1\0\2\10"+
    "\3\0\1\10\1\0\10\10\1\217\23\10\12\0\20\10"+
    "\5\0\1\10\1\0\1\63\1\0\2\10\3\0\1\10"+
    "\1\0\6\10\1\220\3\10\1\221\21\10\12\0\20\10"+
    "\5\0\1\10\1\0\1\63\1\0\2\10\3\0\1\10"+
    "\1\0\15\10\1\222\16\10\12\0\20\10\5\0\1\10"+
    "\1\0\1\63\1\0\2\10\3\0\1\10\1\0\7\10"+
    "\1\223\24\10\12\0\20\10\5\0\1\10\1\0\1\63"+
    "\1\0\2\10\3\0\1\10\1\0\13\10\1\74\20\10"+
    "\12\0\20\10\5\0\1\10\1\0\1\63\1\0\2\10"+
    "\3\0\1\224\1\0\34\10\12\0\20\10\5\0\1\10"+
    "\1\0\1\63\1\0\2\10\3\0\1\10\1\0\5\10"+
    "\1\216\26\10\12\0\20\10\5\0\1\10\1\0\1\63"+
    "\1\0\2\10\3\0\1\225\1\0\4\10\1\226\17\10"+
    "\1\227\7\10\12\0\20\10\5\0\1\10\1\0\1\63"+
    "\1\0\2\10\3\0\1\10\1\0\10\10\1\230\23\10"+
    "\12\0\20\10\5\0\1\10\1\0\1\63\1\0\2\10"+
    "\3\0\1\10\1\0\31\10\1\231\2\10\12\0\20\10"+
    "\2\0\1\160\2\0\1\10\1\0\1\63\1\0\2\10"+
    "\3\0\1\161\1\160\4\10\1\17\1\232\1\21\1\170"+
    "\1\23\1\164\1\25\1\10\1\26\1\27\1\30\1\31"+
    "\1\32\1\167\1\34\1\35\1\36\1\10\1\37\1\10"+
    "\1\40\1\41\1\42\1\10\12\0\20\10\5\0\1\10"+
    "\1\0\1\63\1\0\2\10\3\0\1\10\1\0\7\10"+
    "\1\176\24\10\12\0\20\10\5\0\1\10\1\0\1\63"+
    "\1\0\2\10\3\0\1\10\1\0\24\10\1\233\7\10"+
    "\12\0\20\10\5\0\1\10\1\0\1\63\1\0\2\10"+
    "\3\0\1\10\1\0\6\10\1\234\25\10\12\0\20\10"+
    "\5\0\1\10\1\0\1\63\1\0\2\10\3\0\1\10"+
    "\1\0\11\10\1\235\22\10\12\0\20\10\5\0\1\10"+
    "\1\0\1\63\1\0\2\10\3\0\1\10\1\0\24\10"+
    "\1\236\7\10\12\0\20\10\5\0\1\10\1\0\1\63"+
    "\1\0\2\10\3\0\1\10\1\0\10\10\1\237\23\10"+
    "\12\0\20\10\5\0\1\10\1\0\1\63\1\0\2\10"+
    "\3\0\1\10\1\0\6\10\1\240\25\10\12\0\20\10"+
    "\5\0\1\10\1\0\1\63\1\0\2\10\3\0\1\241"+
    "\1\0\34\10\12\0\20\10\60\0\1\242\32\0\1\10"+
    "\1\0\1\63\1\0\2\10\3\0\1\10\1\0\34\10"+
    "\12\0\12\10\1\243\5\10\5\0\1\10\1\0\1\63"+
    "\1\0\2\10\3\0\1\10\1\0\1\10\1\244\32\10"+
    "\12\0\20\10\5\0\1\10\1\0\1\63\1\0\2\10"+
    "\3\0\1\10\1\0\1\10\1\245\32\10\12\0\20\10"+
    "\5\0\1\10\1\0\1\63\1\0\2\10\3\0\1\10"+
    "\1\0\3\10\1\246\30\10\12\0\20\10\5\0\1\10"+
    "\1\0\1\63\1\0\2\10\3\0\1\10\1\0\34\10"+
    "\12\0\4\10\1\247\13\10\5\0\1\10\1\0\1\63"+
    "\1\0\2\10\3\0\1\10\1\0\1\250\33\10\12\0"+
    "\20\10\5\0\1\10\1\0\1\63\1\0\2\10\3\0"+
    "\1\10\1\0\12\10\1\73\1\10\1\74\17\10\12\0"+
    "\20\10\5\0\1\10\1\0\1\63\1\0\2\10\3\0"+
    "\1\105\1\0\4\10\1\106\3\10\1\251\1\110\22\10"+
    "\12\0\20\10\5\0\1\10\1\0\1\63\1\0\2\10"+
    "\3\0\1\10\1\0\4\10\1\113\4\10\1\252\12\10"+
    "\1\253\7\10\12\0\20\10\5\0\1\10\1\0\1\63"+
    "\1\0\2\10\3\0\1\254\1\0\10\10\1\120\13\10"+
    "\1\121\7\10\12\0\20\10\5\0\1\10\1\0\1\63"+
    "\1\0\2\10\3\0\1\10\1\0\10\10\1\255\13\10"+
    "\1\122\7\10\12\0\20\10\5\0\1\10\1\0\1\63"+
    "\1\0\2\10\3\0\1\10\1\0\10\10\1\256\23\10"+
    "\12\0\20\10\5\0\1\10\1\0\1\63\1\0\2\10"+
    "\3\0\1\10\1\0\11\10\1\257\22\10\12\0\20\10"+
    "\5\0\1\10\1\0\1\63\1\0\2\10\3\0\1\10"+
    "\1\0\4\10\1\113\4\10\1\252\12\10\1\115\7\10"+
    "\12\0\20\10\5\0\1\10\1\0\1\63\1\0\2\10"+
    "\3\0\1\10\1\0\3\10\1\260\30\10\12\0\20\10"+
    "\5\0\1\10\1\0\1\63\1\0\2\10\3\0\1\10"+
    "\1\0\34\10\12\0\3\10\1\261\14\10\5\0\1\10"+
    "\1\0\1\63\1\0\2\10\3\0\1\10\1\0\34\10"+
    "\12\0\1\10\1\262\16\10\5\0\1\10\1\0\1\63"+
    "\1\0\2\10\3\0\1\10\1\0\34\10\12\0\14\10"+
    "\1\263\3\10\5\0\1\10\1\0\1\63\1\0\2\10"+
    "\3\0\1\10\1\0\1\264\33\10\12\0\20\10\5\0"+
    "\1\10\1\0\1\63\1\0\2\10\3\0\1\10\1\0"+
    "\10\10\1\255\23\10\12\0\20\10\2\0\1\160\2\0"+
    "\1\10\1\0\1\63\1\0\2\10\3\0\1\161\1\160"+
    "\4\10\1\265\1\20\1\21\1\170\1\23\1\266\1\25"+
    "\1\10\1\26\1\27\1\30\1\31\1\32\1\167\1\34"+
    "\1\267\1\270\1\10\1\37\1\10\1\40\1\41\1\42"+
    "\1\10\12\0\20\10\5\0\1\10\1\0\1\63\1\0"+
    "\2\10\3\0\1\10\1\0\7\10\1\271\24\10\12\0"+
    "\20\10\5\0\1\10\1\0\1\63\1\0\2\10\3\0"+
    "\1\10\1\0\4\10\1\272\27\10\12\0\20\10\5\0"+
    "\1\10\1\0\1\63\1\0\2\10\3\0\1\10\1\0"+
    "\10\10\1\273\23\10\12\0\20\10\5\0\1\10\1\0"+
    "\1\63\1\0\2\10\3\0\1\10\1\0\15\10\1\74"+
    "\16\10\12\0\20\10\5\0\1\10\1\0\1\63\1\0"+
    "\2\10\3\0\1\10\1\0\4\10\1\274\27\10\12\0"+
    "\20\10\5\0\1\10\1\0\1\63\1\0\2\10\3\0"+
    "\1\10\1\0\10\10\1\74\23\10\12\0\20\10\5\0"+
    "\1\10\1\0\1\63\1\0\2\10\3\0\1\122\1\0"+
    "\34\10\12\0\20\10\5\0\1\10\1\0\1\63\1\0"+
    "\2\10\3\0\1\10\1\0\6\10\1\205\25\10\12\0"+
    "\20\10\5\0\1\10\1\0\1\63\1\0\2\10\3\0"+
    "\1\10\1\0\12\10\1\275\21\10\12\0\20\10\5\0"+
    "\1\10\1\0\1\63\1\0\2\10\3\0\1\10\1\0"+
    "\14\10\1\276\17\10\12\0\20\10\5\0\1\10\1\0"+
    "\1\63\1\0\2\10\3\0\1\10\1\0\23\10\1\122"+
    "\10\10\12\0\20\10\5\0\1\10\1\0\1\63\1\0"+
    "\2\10\3\0\1\10\1\0\6\10\1\277\25\10\12\0"+
    "\20\10\5\0\1\10\1\0\1\63\1\0\2\10\3\0"+
    "\1\10\1\0\12\10\1\300\21\10\12\0\20\10\5\0"+
    "\1\10\1\0\1\63\1\0\2\10\3\0\1\10\1\0"+
    "\10\10\1\301\23\10\12\0\20\10\5\0\1\10\1\0"+
    "\1\63\1\0\2\10\3\0\1\10\1\0\4\10\1\273"+
    "\27\10\12\0\20\10\5\0\1\10\1\0\1\63\1\0"+
    "\2\10\3\0\1\10\1\0\15\10\1\302\16\10\12\0"+
    "\20\10\5\0\1\10\1\0\1\63\1\0\2\10\3\0"+
    "\1\10\1\0\20\10\1\303\13\10\12\0\20\10\5\0"+
    "\1\10\1\0\1\63\1\0\2\10\3\0\1\10\1\0"+
    "\14\10\1\304\17\10\12\0\20\10\5\0\1\10\1\0"+
    "\1\63\1\0\2\10\3\0\1\10\1\0\17\10\1\236"+
    "\14\10\12\0\20\10\5\0\1\10\1\0\1\63\1\0"+
    "\2\10\3\0\1\10\1\0\22\10\1\305\11\10\12\0"+
    "\20\10\5\0\1\10\1\0\1\63\1\0\2\10\3\0"+
    "\1\10\1\0\24\10\1\241\6\10\1\306\12\0\20\10"+
    "\5\0\1\10\1\0\1\63\1\0\2\10\3\0\1\10"+
    "\1\0\25\10\1\307\6\10\12\0\20\10\5\0\1\10"+
    "\1\0\1\63\1\0\2\10\3\0\1\10\1\0\30\10"+
    "\1\310\3\10\12\0\20\10\5\0\1\10\1\0\1\63"+
    "\1\0\2\10\3\0\1\10\1\0\15\10\1\311\16\10"+
    "\12\0\20\10\5\0\1\10\1\0\1\63\1\0\2\10"+
    "\3\0\1\10\1\0\11\10\1\205\22\10\12\0\20\10"+
    "\5\0\1\10\1\0\1\63\1\0\2\10\3\0\1\312"+
    "\1\0\34\10\12\0\20\10\5\0\1\10\1\0\1\63"+
    "\1\0\2\10\3\0\1\105\1\0\4\10\1\106\3\10"+
    "\1\313\1\110\22\10\12\0\20\10\5\0\1\10\1\0"+
    "\1\63\1\0\2\10\3\0\1\10\1\0\25\10\1\74"+
    "\6\10\12\0\20\10\5\0\1\10\1\0\1\63\1\0"+
    "\2\10\3\0\1\10\1\0\6\10\1\74\25\10\12\0"+
    "\20\10\5\0\1\10\1\0\1\63\1\0\2\10\3\0"+
    "\1\10\1\0\10\10\1\314\23\10\12\0\20\10\5\0"+
    "\1\10\1\0\1\63\1\0\2\10\3\0\1\10\1\0"+
    "\20\10\1\115\13\10\12\0\20\10\5\0\1\10\1\0"+
    "\1\63\1\0\2\10\3\0\1\10\1\0\22\10\1\74"+
    "\11\10\12\0\20\10\5\0\1\10\1\0\1\63\1\0"+
    "\2\10\3\0\1\10\1\0\20\10\1\315\13\10\12\0"+
    "\20\10\5\0\1\10\1\0\1\63\1\0\2\10\3\0"+
    "\1\10\1\0\12\10\1\74\21\10\12\0\20\10\60\0"+
    "\1\316\32\0\1\10\1\0\1\63\1\0\2\10\3\0"+
    "\1\10\1\0\34\10\12\0\4\10\1\317\13\10\5\0"+
    "\1\10\1\0\1\63\1\0\2\10\3\0\1\10\1\0"+
    "\34\10\12\0\5\10\1\320\12\10\5\0\1\10\1\0"+
    "\1\63\1\0\2\10\3\0\1\10\1\0\34\10\12\0"+
    "\2\10\1\321\15\10\5\0\1\10\1\0\1\63\1\0"+
    "\2\10\3\0\1\10\1\0\34\10\12\0\11\10\1\322"+
    "\6\10\5\0\1\10\1\0\1\63\1\0\2\10\3\0"+
    "\1\10\1\0\34\10\12\0\5\10\1\323\12\10\5\0"+
    "\1\10\1\0\1\63\1\0\2\10\3\0\1\10\1\0"+
    "\1\324\33\10\12\0\20\10\5\0\1\10\1\0\1\63"+
    "\1\0\2\10\3\0\1\10\1\0\6\10\1\202\5\10"+
    "\1\203\11\10\1\204\1\74\4\10\12\0\20\10\5\0"+
    "\1\10\1\0\1\63\1\0\2\10\3\0\1\10\1\0"+
    "\20\10\1\210\13\10\12\0\20\10\2\0\1\160\2\0"+
    "\1\10\1\0\1\63\1\0\2\10\3\0\1\161\1\160"+
    "\4\10\1\17\1\20\1\21\1\170\1\23\1\164\1\25"+
    "\1\10\1\26\1\27\1\30\1\31\1\32\1\325\1\34"+
    "\1\35\1\36\1\10\1\37\1\10\1\40\1\41\1\42"+
    "\1\10\12\0\20\10\5\0\1\10\1\0\1\63\1\0"+
    "\2\10\3\0\1\10\1\0\30\10\1\212\3\10\12\0"+
    "\20\10\5\0\1\10\1\0\1\63\1\0\2\10\3\0"+
    "\1\10\1\0\11\10\1\74\22\10\12\0\20\10\5\0"+
    "\1\10\1\0\1\63\1\0\2\10\3\0\1\10\1\0"+
    "\6\10\1\215\1\74\1\10\1\122\22\10\12\0\20\10"+
    "\5\0\1\10\1\0\1\63\1\0\2\10\3\0\1\225"+
    "\1\0\24\10\1\227\7\10\12\0\20\10\5\0\1\10"+
    "\1\0\1\63\1\0\2\10\3\0\1\10\1\0\1\326"+
    "\33\10\12\0\20\10\5\0\1\10\1\0\1\63\1\0"+
    "\2\10\3\0\1\10\1\0\34\10\12\0\2\10\1\327"+
    "\15\10\5\0\1\10\1\0\1\63\1\0\2\10\3\0"+
    "\1\10\1\0\34\10\12\0\1\330\17\10\5\0\1\10"+
    "\1\0\1\63\1\0\2\10\3\0\1\10\1\0\5\10"+
    "\1\101\1\102\3\10\1\103\1\10\1\331\17\10\12\0"+
    "\20\10\5\0\1\10\1\0\1\63\1\0\2\10\3\0"+
    "\1\254\1\0\10\10\1\332\13\10\1\121\7\10\12\0"+
    "\20\10\5\0\1\10\1\0\1\63\1\0\2\10\3\0"+
    "\1\10\1\0\4\10\1\137\3\10\1\217\23\10\12\0"+
    "\20\10\5\0\1\10\1\0\1\63\1\0\2\10\3\0"+
    "\1\10\1\0\6\10\1\220\2\10\1\140\1\221\5\10"+
    "\1\141\13\10\12\0\20\10\5\0\1\10\1\0\1\63"+
    "\1\0\2\10\3\0\1\333\1\0\34\10\12\0\20\10"+
    "\5\0\1\10\1\0\1\63\1\0\2\10\3\0\1\10"+
    "\1\0\16\10\1\334\15\10\12\0\20\10\5\0\1\10"+
    "\1\0\1\63\1\0\2\10\3\0\1\10\1\0\7\10"+
    "\1\205\24\10\12\0\20\10\5\0\1\10\1\0\1\63"+
    "\1\0\2\10\3\0\1\10\1\0\20\10\1\335\13\10"+
    "\12\0\20\10\5\0\1\10\1\0\1\63\1\0\2\10"+
    "\3\0\1\10\1\0\15\10\1\216\16\10\12\0\20\10"+
    "\5\0\1\10\1\0\1\63\1\0\2\10\3\0\1\10"+
    "\1\0\7\10\1\336\24\10\12\0\20\10\5\0\1\10"+
    "\1\0\1\63\1\0\2\10\3\0\1\10\1\0\4\10"+
    "\1\337\27\10\12\0\20\10\5\0\1\10\1\0\1\63"+
    "\1\0\2\10\3\0\1\10\1\0\20\10\1\233\13\10"+
    "\12\0\20\10\5\0\1\10\1\0\1\63\1\0\2\10"+
    "\3\0\1\10\1\0\15\10\1\122\16\10\12\0\20\10"+
    "\5\0\1\10\1\0\1\63\1\0\2\10\3\0\1\10"+
    "\1\0\17\10\1\74\14\10\12\0\20\10\5\0\1\10"+
    "\1\0\1\63\1\0\2\10\3\0\1\10\1\0\25\10"+
    "\1\241\6\10\12\0\20\10\5\0\1\10\1\0\1\63"+
    "\1\0\2\10\3\0\1\10\1\0\7\10\1\340\24\10"+
    "\12\0\20\10\5\0\1\10\1\0\1\63\1\0\2\10"+
    "\3\0\1\10\1\0\10\10\1\341\23\10\12\0\20\10"+
    "\5\0\1\10\1\0\1\63\1\0\2\10\3\0\1\10"+
    "\1\0\20\10\1\205\13\10\12\0\20\10\5\0\1\10"+
    "\1\0\1\63\1\0\2\10\3\0\1\10\1\0\4\10"+
    "\1\342\27\10\12\0\20\10\5\0\1\10\1\0\1\63"+
    "\1\0\2\10\3\0\1\10\1\0\25\10\1\343\6\10"+
    "\12\0\20\10\5\0\1\10\1\0\1\63\1\0\2\10"+
    "\3\0\1\10\1\0\10\10\1\344\23\10\12\0\20\10"+
    "\5\0\1\10\1\0\1\63\1\0\2\10\3\0\1\10"+
    "\1\0\12\10\1\345\21\10\12\0\20\10\5\0\1\10"+
    "\1\0\1\63\1\0\2\10\3\0\1\10\1\0\6\10"+
    "\1\202\2\10\1\74\2\10\1\203\11\10\1\204\5\10"+
    "\12\0\20\10\5\0\1\10\1\0\1\63\1\0\2\10"+
    "\3\0\1\346\1\0\34\10\12\0\20\10\5\0\1\10"+
    "\1\0\1\63\1\0\2\10\3\0\1\10\1\0\10\10"+
    "\1\336\23\10\12\0\20\10\5\0\1\10\1\0\1\63"+
    "\1\0\2\10\3\0\1\10\1\0\34\10\12\0\14\10"+
    "\1\347\3\10\5\0\1\10\1\0\1\63\1\0\2\10"+
    "\3\0\1\10\1\0\3\10\1\350\30\10\12\0\20\10"+
    "\5\0\1\10\1\0\1\63\1\0\2\10\3\0\1\10"+
    "\1\0\34\10\12\0\4\10\1\351\13\10\5\0\1\10"+
    "\1\0\1\63\1\0\2\10\3\0\1\10\1\0\34\10"+
    "\12\0\12\10\1\352\5\10\5\0\1\10\1\0\1\63"+
    "\1\0\2\10\3\0\1\10\1\0\1\10\1\353\32\10"+
    "\12\0\20\10\5\0\1\10\1\0\1\63\1\0\2\10"+
    "\3\0\1\10\1\0\2\10\1\354\31\10\12\0\20\10"+
    "\2\0\1\160\2\0\1\10\1\0\1\63\1\0\2\10"+
    "\3\0\1\161\1\160\4\10\1\17\1\20\1\21\1\170"+
    "\1\23\1\355\1\25\1\10\1\26\1\27\1\30\1\31"+
    "\1\32\1\167\1\34\1\35\1\36\1\10\1\37\1\10"+
    "\1\40\1\41\1\42\1\10\12\0\20\10\1\356\2\0"+
    "\2\356\1\357\1\356\1\360\1\356\2\357\3\356\1\357"+
    "\1\356\34\357\12\356\20\357\5\0\1\10\1\0\1\63"+
    "\1\0\2\10\3\0\1\10\1\0\34\10\12\0\1\361"+
    "\17\10\2\0\1\160\2\0\1\10\1\0\1\63\1\0"+
    "\2\10\3\0\1\161\1\160\4\10\1\17\1\20\1\21"+
    "\1\170\1\362\1\164\1\25\1\10\1\26\1\177\1\30"+
    "\1\31\1\32\1\167\1\34\1\35\1\36\1\10\1\37"+
    "\1\10\1\40\1\41\1\42\1\10\12\0\20\10\5\0"+
    "\1\10\1\0\1\63\1\0\2\10\3\0\1\10\1\0"+
    "\4\10\1\273\14\10\1\213\12\10\12\0\20\10\5\0"+
    "\1\10\1\0\1\63\1\0\2\10\3\0\1\10\1\0"+
    "\12\10\1\301\21\10\12\0\20\10\5\0\1\10\1\0"+
    "\1\63\1\0\2\10\3\0\1\10\1\0\4\10\1\124"+
    "\27\10\12\0\20\10\5\0\1\10\1\0\1\63\1\0"+
    "\2\10\3\0\1\10\1\0\6\10\1\122\25\10\12\0"+
    "\20\10\5\0\1\10\1\0\1\63\1\0\2\10\3\0"+
    "\1\10\1\0\14\10\1\74\17\10\12\0\20\10\5\0"+
    "\1\10\1\0\1\63\1\0\2\10\3\0\1\10\1\0"+
    "\15\10\1\205\16\10\12\0\20\10\5\0\1\10\1\0"+
    "\1\63\1\0\2\10\3\0\1\10\1\0\11\10\1\363"+
    "\22\10\12\0\20\10\5\0\1\10\1\0\1\63\1\0"+
    "\2\10\3\0\1\10\1\0\10\10\1\241\23\10\12\0"+
    "\20\10\5\0\1\10\1\0\1\63\1\0\2\10\3\0"+
    "\1\10\1\0\11\10\1\132\22\10\12\0\20\10\5\0"+
    "\1\10\1\0\1\63\1\0\2\10\3\0\1\10\1\0"+
    "\4\10\1\364\27\10\12\0\20\10\5\0\1\10\1\0"+
    "\1\63\1\0\2\10\3\0\1\10\1\0\5\10\1\365"+
    "\26\10\12\0\20\10\5\0\1\10\1\0\1\63\1\0"+
    "\2\10\3\0\1\10\1\0\30\10\1\74\3\10\12\0"+
    "\20\10\5\0\1\10\1\0\1\63\1\0\2\10\3\0"+
    "\1\10\1\0\30\10\1\241\3\10\12\0\20\10\5\0"+
    "\1\10\1\0\1\63\1\0\2\10\3\0\1\10\1\0"+
    "\34\10\12\0\15\10\1\366\2\10\5\0\1\10\1\0"+
    "\1\63\1\0\2\10\3\0\1\10\1\0\34\10\12\0"+
    "\6\10\1\367\11\10\5\0\1\10\1\0\1\63\1\0"+
    "\2\10\3\0\1\10\1\0\1\10\1\370\32\10\12\0"+
    "\20\10\5\0\1\10\1\0\1\63\1\0\2\10\3\0"+
    "\1\10\1\0\34\10\12\0\11\10\1\371\6\10\5\0"+
    "\1\10\1\0\1\63\1\0\2\10\3\0\1\10\1\0"+
    "\1\10\1\372\32\10\12\0\20\10\5\0\1\10\1\0"+
    "\1\63\1\0\2\10\3\0\1\373\1\0\10\10\1\120"+
    "\13\10\1\374\7\10\12\0\20\10\1\356\1\0\1\375"+
    "\14\356\1\376\67\356\1\0\1\375\2\356\1\357\1\356"+
    "\1\360\1\356\2\357\3\356\1\357\1\376\34\357\12\356"+
    "\20\357\5\0\1\10\1\0\1\63\1\0\2\10\3\0"+
    "\1\10\1\0\34\10\12\0\1\10\1\377\16\10\2\0"+
    "\1\160\2\0\1\10\1\0\1\63\1\0\2\10\3\0"+
    "\1\161\1\160\4\10\1\17\1\20\1\21\1\170\1\23"+
    "\1\164\1\25\1\10\1\26\1\27\1\30\1\31\1\32"+
    "\1\167\1\34\1\35\1\36\1\10\1\37\1\116\1\40"+
    "\1\41\1\42\1\10\12\0\20\10\5\0\1\10\1\0"+
    "\1\63\1\0\2\10\3\0\1\10\1\0\4\10\1\u0100"+
    "\27\10\12\0\20\10\5\0\1\10\1\0\1\63\1\0"+
    "\2\10\3\0\1\10\1\0\20\10\1\230\13\10\12\0"+
    "\20\10\5\0\1\10\1\0\1\63\1\0\2\10\3\0"+
    "\1\10\1\0\1\10\1\u0101\32\10\12\0\20\10\5\0"+
    "\1\10\1\0\1\63\1\0\2\10\3\0\1\10\1\0"+
    "\3\10\1\u0102\30\10\12\0\20\10\5\0\1\10\1\0"+
    "\1\63\1\0\2\10\3\0\1\10\1\0\34\10\12\0"+
    "\15\10\1\u0103\2\10\5\0\1\10\1\0\1\63\1\0"+
    "\2\10\3\0\1\10\1\0\34\10\12\0\5\10\1\u0104"+
    "\12\10\5\0\1\10\1\0\1\63\1\0\2\10\3\0"+
    "\1\10\1\0\34\10\12\0\15\10\1\u0105\2\10\5\0"+
    "\1\10\1\0\1\63\1\0\2\10\3\0\1\10\1\0"+
    "\25\10\1\307\2\10\1\212\3\10\12\0\20\10\5\0"+
    "\1\10\1\0\1\63\1\0\2\10\3\0\1\10\1\0"+
    "\15\10\1\311\4\10\1\214\11\10\12\0\20\10\5\0"+
    "\1\10\1\0\1\63\1\0\2\10\3\0\1\u0106\1\0"+
    "\34\10\12\0\20\10\5\0\1\10\1\0\1\63\1\0"+
    "\2\10\3\0\1\10\1\0\1\u0107\33\10\12\0\20\10"+
    "\5\0\1\10\1\0\1\63\1\0\2\10\3\0\1\10"+
    "\1\0\34\10\12\0\2\10\1\u0108\15\10\5\0\1\10"+
    "\1\0\1\63\1\0\2\10\3\0\1\10\1\0\34\10"+
    "\12\0\5\10\1\u0109\12\10\5\0\1\10\1\0\1\63"+
    "\1\0\2\10\3\0\1\10\1\0\34\10\12\0\16\10"+
    "\1\u010a\1\10\5\0\1\10\1\0\1\63\1\0\2\10"+
    "\3\0\1\10\1\0\12\10\1\122\21\10\12\0\20\10"+
    "\5\0\1\10\1\0\1\63\1\0\1\u010b\1\10\3\0"+
    "\1\10\1\0\34\10\12\0\20\10\5\0\1\10\1\0"+
    "\1\63\1\0\2\10\3\0\1\10\1\0\34\10\12\0"+
    "\5\10\1\u010c\12\10\5\0\1\10\1\0\1\63\1\0"+
    "\2\10\3\0\1\10\1\0\34\10\12\0\14\10\1\u010d"+
    "\3\10\5\0\1\10\1\0\1\63\1\0\2\10\3\0"+
    "\1\10\1\0\34\10\12\0\1\10\1\u010e\16\10\5\0"+
    "\1\10\1\0\1\63\1\0\2\10\3\0\1\10\1\0"+
    "\34\10\12\0\1\u010f\17\10\5\0\1\10\1\0\1\63"+
    "\1\0\2\10\3\0\1\10\1\0\1\u0110\33\10\12\0"+
    "\20\10\5\0\1\10\1\0\1\63\1\0\2\10\3\0"+
    "\1\10\1\0\34\10\12\0\2\10\1\u0111\15\10\5\0"+
    "\1\10\1\0\1\63\1\0\2\10\3\0\1\10\1\0"+
    "\1\10\1\u0112\32\10\12\0\20\10\5\0\1\10\1\0"+
    "\1\63\1\0\2\10\3\0\1\10\1\0\34\10\12\0"+
    "\2\10\1\u0113\15\10";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17080];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\34\1\4\11\1\1\5\11"+
    "\6\1\1\11\1\0\1\11\3\0\1\11\57\1\1\0"+
    "\6\1\1\11\61\1\1\0\53\1\1\11\37\1\1\0"+
    "\16\1\1\11\26\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[275];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _TestLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _TestLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 34: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 35: break;
          case 3: 
            { return COMMENT;
            } 
            // fall through
          case 36: break;
          case 4: 
            { return NUMBER;
            } 
            // fall through
          case 37: break;
          case 5: 
            { return DOT;
            } 
            // fall through
          case 38: break;
          case 6: 
            { return DDOT;
            } 
            // fall through
          case 39: break;
          case 7: 
            { return ID;
            } 
            // fall through
          case 40: break;
          case 8: 
            { return SEMI;
            } 
            // fall through
          case 41: break;
          case 9: 
            { return EQ;
            } 
            // fall through
          case 42: break;
          case 10: 
            { return LP;
            } 
            // fall through
          case 43: break;
          case 11: 
            { return RP;
            } 
            // fall through
          case 44: break;
          case 12: 
            { return MINUS;
            } 
            // fall through
          case 45: break;
          case 13: 
            { return PLUS;
            } 
            // fall through
          case 46: break;
          case 14: 
            { return COMMA;
            } 
            // fall through
          case 47: break;
          case 15: 
            { return STAR;
            } 
            // fall through
          case 48: break;
          case 16: 
            { return LESS;
            } 
            // fall through
          case 49: break;
          case 17: 
            { return HIGHER;
            } 
            // fall through
          case 50: break;
          case 18: 
            { return STRING;
            } 
            // fall through
          case 51: break;
          case 19: 
            { return QUERY_RETURN_TYPE;
            } 
            // fall through
          case 52: break;
          case 20: 
            { return SQL;
            } 
            // fall through
          case 53: break;
          case 21: 
            { return LOAD;
            } 
            // fall through
          case 54: break;
          case 22: 
            { return LOOP;
            } 
            // fall through
          case 55: break;
          case 23: 
            { return Q_RESULT;
            } 
            // fall through
          case 56: break;
          case 24: 
            { return BEGIN;
            } 
            // fall through
          case 57: break;
          case 25: 
            { return QUERY;
            } 
            // fall through
          case 58: break;
          case 26: 
            { return PRAGMA;
            } 
            // fall through
          case 59: break;
          case 27: 
            { return QUERY_LABEL;
            } 
            // fall through
          case 60: break;
          case 28: 
            { return ENDLOOP;
            } 
            // fall through
          case 61: break;
          case 29: 
            { return RESTART;
            } 
            // fall through
          case 62: break;
          case 30: 
            { return ROLLBACK;
            } 
            // fall through
          case 63: break;
          case 31: 
            { return STATEMENT;
            } 
            // fall through
          case 64: break;
          case 32: 
            { return TRANSACTION;
            } 
            // fall through
          case 65: break;
          case 33: 
            { return PHYSICAL_PLAN;
            } 
            // fall through
          case 66: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
