{
  parserClass="org.intellij.sdk.language.parser.TestParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Test"
  psiImplClassSuffix="Impl"
  psiPackage="org.intellij.sdk.language.psi"
  psiImplPackage="org.intellij.sdk.language.psi.impl"

  elementTypeHolderClass="org.intellij.sdk.language.psi.TestTypes"
  elementTypeClass="org.intellij.sdk.language.psi.TestElementType"
  tokenTypeClass="org.intellij.sdk.language.psi.TestTokenType"
    parserImports=["static com.intellij.lang.parser.GeneratedParserUtilBase.*"]
  psiImplUtilClass="org.intellij.sdk.language.psi.impl.TestPsiImplUtil"
  parserUtilClass="org.intellij.sdk.language.SQLTestParserUtil"

  tokens=[
    SEMI=';'
    DDOT=':'
    EQ='='
    LP='('
    RP=')'
    space=' '
    dot = '.'
    minus = '-'
    plus = '+'
    comma = ','
    star = '*'
    less = '<'
    higher = '>'
    loop = 'loop'
    endloop = 'endloop'
    statement = 'statement'
    comment='regexp:#.*'
    number='regexp:\d+(\.\d*)?'
    id='regexp::?\p{Alpha}\w*:?'
    string="regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\.)*\")"
    query = 'query'
    query_return_type = "regexp:[TIR]+\s"
    query_label = "regexp:label.+\s"
    load = 'load'
    pragma = 'PRAGMA'
    restart = 'restart'
    begin = 'begin'
    transaction = 'transaction'
    rollback = 'rollback'
    q_result = '----'
    physical_plan = 'physical_plan'


    // SQL Keywords
    sql = "regexp:(ADD|ALTER|AND|ANY|AS|ASC|BACKUP|BETWEEN|CASE|CHECK|CREATE|REPLACE|DELETE|DESC|COLUMN|CONSTRAINT|DROP|DATABASE|DEFAULT|EXEC|EXISTS|FOREIGN|FROM|FULL|GROUP|HAVING|IN|INDEX|INNER|INSERT|IS|LEFT|LIKE|LIMIT|NOT|OR|ORDER|BY|OUTER|PRIMARY|KEY|PROCEDURE|RIGHT|JOIN|ROWNUM|SELECT|DISTINCT|INTO|SET|TOP|TRUNCATE|TABLE|UNION|ALL|UNIQUE|UPDATE|VALUES|VIEW|WHERE)+\s"
  ]
}

testFile ::= item_ *
external accept_all_rule ::= accept_all
private item_ ::= !<<eof>> accept_all_rule

//
//private item_ ::= !<<eof>> (comment| property_loop|query_statement|load_statement|restart|property_statement) item_?
//
//property_loop ::= loop space id space number space number  property_statement endloop
//external tsv_line_rule ::= sqlResults
//external sql_query_rule ::= sqlQuery
//statement_value ::='ok'|'error'
//query_sort_mode ::= 'nosort'|'rowsort'|'valuesort'
//pragma_rule ::= pragma space id
//query_statement ::= query space query_return_type [(query_sort_mode [space query_label])|query_label] query_regex '----' tsv_line_rule
//property_statement ::= STATEMENT space statement_value  (pragma_rule|query_regex)
//load_statement ::= load space id

