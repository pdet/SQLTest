{
  parserClass="org.intellij.sdk.language.parser.TestParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Test"
  psiImplClassSuffix="Impl"
  psiPackage="org.intellij.sdk.language.psi"
  psiImplPackage="org.intellij.sdk.language.psi.impl"

  elementTypeHolderClass="org.intellij.sdk.language.psi.TestTypes"
  elementTypeClass="org.intellij.sdk.language.psi.TestElementType"
  tokenTypeClass="org.intellij.sdk.language.psi.TestTokenType"
    parserImports=["static com.intellij.lang.parser.GeneratedParserUtilBase.*"]
  psiImplUtilClass="org.intellij.sdk.language.psi.impl.TestPsiImplUtil"
  parserUtilClass="org.intellij.sdk.language.SQLTestParserUtil"

  tokens=[
  WHITE_SPACE='regexp:\n'
    SEMI=';'
    EQ='='
    LP='('
    RP=')'
    space=' '
    tab = '\t'
    tempdb='kkk'

    loop = 'loop'
    endloop = 'endloop'
    statement = 'statement'
    comment='regexp:#.*'
    number='regexp:\d+(\.\d*)?'
    id='regexp::?\p{Alpha}\w*:?'
    string="regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\.)*\")"
    query_regex = "regexp:.*\;"
    query = 'query'
    query_return_type = "regexp:[TIR]*\s"
    query_label = "regexp:label.*\s"
    load = 'load'
  ]
}

testFile ::= item_ *

private item_ ::= !<<eof>> (comment| property_loop|query_statement|load_statement) item_?

property_loop ::= loop space id space number space number  property_statement endloop
external tsv_line_rule ::= sqlResults
external sql_query_rule ::= sqlQuery
statement_value ::='ok'|'error'
query_sort_mode ::= 'nosort'|'rowsort'|'valuesort'
query_statement ::= query space query_return_type [(query_sort_mode [space query_label])|query_label] sql_query_rule '____' tsv_line_rule
property_statement ::= STATEMENT space statement_value  query_regex
load_statement ::= load space id

